import os
import random
import re
import subprocess
import time
import math
from integration import (
    left_rectangle_method,
    right_rectangle_method,
    middle_rectangle_method,
    trapezoid_method,
    simpson_method,
    integrate_with_runge,
)
from equations import FUNCTIONS
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt
from rich.live import Live
from rich.spinner import Spinner
from rich.text import Text

console = Console()


def play_meow():
    try:
        sounds_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "sounds")
        meow_files = [f for f in os.listdir(sounds_dir) if f.endswith(".mp3")]

        if not meow_files:
            return

        meow_file = random.choice(meow_files)
        meow_path = os.path.join(sounds_dir, meow_file)
        subprocess.Popen(
            ["afplay", meow_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
    except Exception:
        pass


class IntegrationApp:
    def __init__(self):
        self.error_msg = None
        self.step = "func"
        self.running = True
        self.max_iterations = 100
        self.is_calculating = False

    def run(self):
        self.show_welcome_animation()

        while self.running:
            if self.step == "func":
                self.show_function_selection()
            elif self.step == "limits":
                self.get_integration_limits()
            elif self.step == "eps":
                self.get_epsilon()
            elif self.step == "method":
                self.select_method()
            elif self.step == "calc":
                self.calculate_integral()
            elif self.step == "result":
                self.show_result()

    def show_welcome_animation(self):
        frames = [
            "  /\\_/\\  \n ( o.o ) \n  > ^ <  ",
            "  /\\_/\\  \n ( .o. ) \n  > ^ <  ",
            "  /\\_/\\  \n ( o o ) \n  > ^ <  ",
            "  /\\_/\\  \n ( -.- ) \n  > ^ <  ",
        ]
        with Live(auto_refresh=False, console=console) as live:
            for i in range(6):
                live.update(
                    Panel(
                        Text(frames[i % 4], style="bold magenta"),
                        title="[bold blue] –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –º—è—É–∫—É–ª—è—Ç–æ—Ä v1.1 üê±",
                        expand=False,
                    ),
                    refresh=True,
                )
                time.sleep(0.3)
            time.sleep(1)

    def show_function_selection(self):
        console.clear()
        table = Table(title="üê± –î–æ—Å—Ç—É–ø–Ω—ã–µ –º—è—É-—É–Ω–∫—Ü–∏–∏ üê±")
        table.add_column("‚Ññ", style="cyan", justify="center")
        table.add_column("–§–æ—Ä–º—É—Ä—Ä—Ä–ª–∞", style="magenta")
        table.add_column("–û–±–ª–∞—Å—Ç—å –º—è—É—É–¥–µ–ª–µ–Ω–∏—è", style="green")

        for key, (formula_str, _, domain) in FUNCTIONS.items():
            domain_str = domain if domain else "–í—Å—è –∫–æ—à–∞—á—å—è –æ—Å—å"
            table.add_row(key, str(formula_str), domain_str)

        console.print(Panel(table, border_style="blue"))

        if self.error_msg:
            console.print(f"[bold red]{self.error_msg}[/bold red]")
            self.error_msg = None

        choices = list(FUNCTIONS.keys())
        while True:
            func_choice = Prompt.ask(f"[yellow]üêæ –í—ã–±–µ—Ä–∏ –º—è—É-—É–Ω–∫—Ü–∏—é {choices}[/yellow]")

            play_meow()

            if func_choice in choices:
                break
            self.show_error_cat("—à-—à-—à –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –±–∞–∫–∞! –ø–æ–¥—É–º–∞–π –µ—â–µ —Ä–∞–∑! üòº")

        self.formula_str, self.func, self.domain = FUNCTIONS[func_choice]
        self.step = "limits"

    def get_integration_limits(self):
        console.clear()
        console.print(f"[bold green]–¢—ã –≤—ã–±—Ä–∞–ª:[/bold green] {self.formula_str}")

        if self.domain:
            console.print(f"[bold blue]–û–±–ª–∞—Å—Ç—å –º—è—É–¥–µ–ª–µ–Ω–∏—è:[/bold blue] {self.domain}")

        num_pattern = r"^[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?$"

        self.a = self.meme_input(
            "–í–≤–µ–¥–∏ –Ω–∏–∂–Ω–∏–π –ø–µ—Ä–¥–µ–ª (a)", num_pattern, allow_negative=True, allow_zero=True
        )
        self.b = self.meme_input(
            "–í–≤–µ–¥–∏ –≤–µ—Ä—Ö–Ω–∏–π –ø–µ—Ä–¥–µ–ª (b)",
            num_pattern,
            allow_negative=True,
            allow_zero=True,
        )

        if self.a == self.b:
            self.error_msg = "–ò–Ω—Ç–µ–≥—Ä–∞–ª –ø–æ —Ç–æ—á–∫–µ? –°–µ–º–ø–∞–π —Ç—ã —Å–µ—Ä—å–µ–∑–Ω–æ? ü§°"
            self.step = "func"
            return

        if self.a > self.b:
            console.print(
                "[yellow]üîÑ –°–µ–º–ø–∞–π, —Ç—ã –ª—é–±–∏—à—å –≤—Å—ë –¥–µ–ª–∞—Ç—å –Ω–∞–æ–±–æ—Ä–æ—Ç! –ú—É—Ä—Ä—Ä, –ø–æ–º–µ–Ω—è—é –º–µ—Å—Ç–∞–º–∏ a –∏ b[/yellow]"
            )
            self.a, self.b = self.b, self.a

        try:
            for x in [self.a, self.b, (self.a + self.b) / 2]:
                val = self.func(x)
                if math.isinf(val) or math.isnan(val):
                    raise ValueError(f"–§—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Ç–æ—á–∫–µ x={x} :(((")
        except Exception as e:
            self.error_msg = f"üò± –£–ñ–ê–°–°–°–°–°–° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π: {str(e)}"
            self.step = "func"
            return

        # self.check_convergence()
        self.step = "eps"

    # def check_convergence(self):
    #     status_spinner = Spinner(
    #         "dots", text="[bold cyan]–ú—è—É–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å... üê±üßÆ[/bold cyan]"
    #     )

    #     with Live(status_spinner, refresh_per_second=10, console=console) as live:
    #         try:
    #             if not self.domain or "–≤—Å—é –∫–æ—à–∞—á—å—é –æ—Å—å" in self.domain.lower():
    #                 self.has_discontinuity = False
    #                 live.stop()
    #                 return True

    #             self.discontinuities = []

    #             try:
    #                 val_a = self.func(self.a)
    #                 if math.isinf(val_a) or math.isnan(val_a):
    #                     self.discontinuities.append((self.a, "a"))
    #             except Exception:
    #                 self.discontinuities.append((self.a, "a"))

    #             try:
    #                 val_b = self.func(self.b)
    #                 if math.isinf(val_b) or math.isnan(val_b):
    #                     self.discontinuities.append((self.b, "b"))
    #             except Exception:
    #                 self.discontinuities.append((self.b, "b"))

    #             steps = 20
    #             dx = (self.b - self.a) / steps
    #             for i in range(1, steps):
    #                 x = self.a + i * dx
    #                 try:
    #                     val = self.func(x)
    #                     if math.isinf(val) or math.isnan(val):
    #                         self.discontinuities.append((x, "inside"))
    #                 except Exception:
    #                     self.discontinuities.append((x, "inside"))

    #             if not self.discontinuities:
    #                 self.has_discontinuity = False
    #                 live.stop()
    #                 return True

    #             self.has_discontinuity = True
    #             self.discontinuity_points = []

    #             for x, loc in self.discontinuities:
    #                 if loc == "a":
    #                     x_test_start = x + 0.001
    #                     x_test_end = x + 0.01
    #                 elif loc == "b":
    #                     x_test_start = x - 0.01
    #                     x_test_end = x - 0.001
    #                 else:
    #                     x_test_start = x - 0.01
    #                     x_test_end = x + 0.01

    #                 num_points = 5
    #                 p_values = []

    #                 for i in range(num_points):
    #                     try:
    #                         if loc == "a":
    #                             x_test = (
    #                                 x_test_start
    #                                 + i * (x_test_end - x_test_start) / num_points
    #                             )
    #                             delta = x_test - x
    #                         elif loc == "b":
    #                             x_test = (
    #                                 x_test_end
    #                                 - i * (x_test_end - x_test_start) / num_points
    #                             )
    #                             delta = x - x_test
    #                         else:
    #                             if i % 2 == 0:
    #                                 x_test = x + (i // 2 + 1) * 0.001
    #                                 delta = x_test - x
    #                             else:
    #                                 x_test = x - (i // 2 + 1) * 0.001
    #                                 delta = x - x_test

    #                         if abs(delta) < 1e-10:
    #                             continue

    #                         val_test = abs(self.func(x_test))
    #                         if val_test == 0:
    #                             p_values.append(0)
    #                             continue

    #                         if val_test < 1e-10 or abs(delta) < 1e-10:
    #                             p_values.append(0)
    #                             continue

    #                         p = -math.log(val_test) / math.log(abs(delta))

    #                         if math.isnan(p) or math.isinf(p):
    #                             continue

    #                         p_values.append(p)

    #                     except Exception:
    #                         continue

    #                 if not p_values:
    #                     continue

    #                 avg_p = sum(p_values) / len(p_values)

    #                 if math.isinf(self.a) or math.isinf(self.b):
    #                     self.converges = True

    #                 if avg_p >= 1:
    #                     self.converges = False
    #                     live.stop()
    #                     console.print(
    #                         Panel(
    #                             f"[bold red] *–≥—Ä—É—Å—Ç–Ω—ã–π –º—è—É* –ò–Ω—Ç–µ–≥—Ä–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/bold red]\n\n"
    #                             f"–û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–æ—á–∫–µ {x:.5f}: p ‚âà {avg_p:.2f}\n"
    #                             "  /\\_/\\  \n ( x.x ) \n  > ^ <  ",
    #                             border_style="red",
    #                         )
    #                     )
    #                     time.sleep(2)
    #                     return False

    #             self.converges = True
    #             self.discontinuity_points = [x for x, _ in self.discontinuities]
    #             live.stop()
    #             return True

    #         except Exception as e:
    #             live.stop()
    #             console.print(
    #                 f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ x_x: {str(e)}[/red]"
    #             )
    #             self.converges = None
    #             return None

    def get_epsilon(self):
        console.clear()
        console.print(
            f"[bold green]–•–∏-—Ö–∏, –ø–µ—Ä–¥–µ–ª—ã: a={self.a}, b={self.b}[/bold green]"
        )
        num_pattern = r"^[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?$"

        self.eps = self.meme_input(
            "–°–µ–º–ø–∞–π, –≤–≤–µ–¥–∏ —Ç–æ—á–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0001)",
            num_pattern,
            allow_negative=False,
            allow_zero=False,
            max_value=1.0,
        )

        if self.eps > 0.1:
            console.print("[yellow]üìâ –í—ã–±—Ä–∞–Ω–∞ –¥–æ–≤–æ–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å [/yellow]")

        self.step = "method"

    def select_method(self):
        table = Table(title="üßÆ –ú–µ—Ç–æ–¥—ã –º—è—É-—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è üßÆ")
        table.add_column("‚Ññ", style="cyan", justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="magenta")
        table.add_column("–ü–æ—Ä—è–¥–æ–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏", style="green")

        methods = [
            ("1", "–õ–µ–≤—ã–µ –º—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏", "O(h)"),
            ("2", "–ü—Ä–∞–≤—ã–µ –º—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏", "O(h)"),
            ("3", "–°—Ä–µ–¥–Ω–∏–µ –º—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏", "O(h¬≤)"),
            ("4", "–ú—è—É-–ø–µ—Ü–∏–∏", "O(h¬≤)"),
            ("5", "–ö–æ—Ç–æ–°–∏–º–ø—Å–æ–Ω", "O(h‚Å¥)"),
        ]

        for num, name, order in methods:
            table.add_row(num, name, order)

        console.print(Panel(table, border_style="blue"))

        while True:
            method_choice = Prompt.ask(
                "[yellow]üî¢ –í—ã–±–µ—Ä–∏ –º—è—É-—Ç–æ–¥ [1, 2, 3, 4, 5][/yellow]"
            )
            play_meow()

            if method_choice in ["1", "2", "3", "4", "5"]:
                break
            self.show_error_cat("—à-—à-—à –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –±–∞–∫–∞! –ø–æ–¥—É–º–∞–π –µ—â–µ —Ä–∞–∑! üòº")

        methods = {
            "1": left_rectangle_method,
            "2": right_rectangle_method,
            "3": middle_rectangle_method,
            "4": trapezoid_method,
            "5": simpson_method,
        }

        self.method_name = {
            "1": "–õ–µ–≤—ã–µ –º—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏",
            "2": "–ü—Ä–∞–≤—ã–µ –º—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏",
            "3": "–°—Ä–µ–¥–Ω–∏–µ –º—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏",
            "4": "–ú—è—É–ø–µ—Ü–∏–∏",
            "5": "–ö–æ—Ç–æ–°–∏–º–ø—Å–æ–Ω",
        }[method_choice]

        self.selected_method = methods[method_choice]
        self.step = "calc"

    def calculate_integral(self):
        console.clear()

        if hasattr(self, "converges") and not self.converges:
            self.step = "func"
            return

        status_spinner = Spinner(
            "dots", text="[bold cyan] –í–ñ–ñ–ñ–ñ–ñ–ñ –°—á–∏—Ç–∞—é –∏–Ω—Ç–µ–≥—Ä–∞–ª... üê±üßÆ[/bold cyan]"
        )

        with Live(status_spinner, refresh_per_second=10, console=console) as live:
            try:
                initial_n = 4
                result, n = integrate_with_runge(
                    self.selected_method,
                    self.func,
                    self.a,
                    self.b,
                    self.eps,
                    initial_n,
                    self.max_iterations,
                )

                if math.isinf(result) or math.isnan(result):
                    self.error_msg = "üî• –û –ù–ï–¢ –ù–ï–¢ –ù–ï–¢ –ù–ï–¢, –ö–∞–∂–µ—Ç—Å—è, –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è –∏–ª–∏ –∏–º–µ–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏!"
                    self.step = "func"
                    return

                self.result = result
                self.n = n

                time.sleep(1.5)

            except Exception as e:
                self.error_msg = f"üôÄ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}"
                self.step = "func"
                return

            live.update(
                Spinner(
                    "dots", text="[bold green]–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã... üê±‚ú®[/bold green]"
                )
            )
            time.sleep(1)
            live.stop()

        self.step = "result"

    def show_result(self):
        console.clear()

        play_meow()
        frames = [
            "  /\\_/\\  \n ( o.o ) \n  > ^ <  [bold cyan]–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤![/bold cyan]",
            "  /\\_/\\  \n ( .o. ) \n  > ^ <  [bold cyan]–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤![/bold cyan]",
            "  /\\_/\\  \n ( o.o ) \n  > ^ <  [bold cyan]–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤![/bold cyan]",
        ]

        with Live(auto_refresh=False, console=console) as live:
            for frame in frames:
                live.update(Text.from_markup(frame))
                time.sleep(0.3)

        play_meow()

        result_table = Table(show_header=False, border_style="green")
        result_table.add_row("üéâ –ì–æ—Ç–æ–≤–æ! üéâ", style="bold green")
        result_table.add_row(f"üî¢ –ò–Ω—Ç–µ–≥—Ä–∞–ª: {self.result:.10g}")
        result_table.add_row(f"üìê –†–∞–∑–±–∏–µ–Ω–∏–π: {self.n}")
        result_table.add_row(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {self.eps}")

        if hasattr(self, "n") and self.n >= self.max_iterations * 4:
            result_table.add_row(
                "[yellow]‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π[/yellow]"
            )

        console.print(
            Panel(
                result_table, title="[bold magenta]–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è[/bold magenta]"
            )
        )

        cat_result = f"""
        /\\_/\\  
        ( o.o ) 
        > ^ <  –†–µ–∑—É–ª—å—Ç–∞—Ç: {self.result:.5f}
        """
        console.print(Panel(cat_result, border_style="blue"))

        while True:
            again = Prompt.ask("[yellow]üîÅ –ï—â—ë —Ä–∞–∑? [1, 0][/yellow]")

            play_meow()

            if again in ["0", "1"]:
                break
            self.show_error_cat("—à-—à-—à –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –±–∞–∫–∞! –ø–æ–¥—É–º–∞–π –µ—â–µ —Ä–∞–∑! üòº")

        if again == "0":
            self.show_goodbye_animation()
            self.running = False
        else:
            self.step = "func"

    def meme_input(self, prompt, pattern=None, **kwargs):
        while True:
            user_input = Prompt.ask(f"[yellow]üêæ {prompt}[/yellow]")

            play_meow()

            if not user_input.strip():
                self.show_error_cat("–ü—É—Å—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –Ω–µ –ª–µ–Ω–∏—Å—å üòº")
                continue

            if pattern and not re.fullmatch(pattern, user_input.strip()):
                self.show_error_cat(
                    "ü•≤ –≠–º–º–º–º –∞ –Ω–∏—á–µ —Ç–æ—Ç —Ñ–∞–∫—Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ!"
                )
                continue

            try:
                value = float(user_input)
                if not kwargs.get("allow_negative") and value < 0:
                    self.show_error_cat("üòæ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∫–∞—Ç—è—Ç!")
                    continue

                if not kwargs.get("allow_zero") and value == 0:
                    self.show_error_cat("üòπ –ù–æ–ª—å? –°–µ—Ä—å—ë–∑–Ω–æ?")
                    continue

                if kwargs.get("float_only") and "." not in user_input:
                    self.show_error_cat("üßÉ –î—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
                    continue

                if kwargs.get("max_value") is not None and value > kwargs["max_value"]:
                    self.show_error_cat(
                        f"üìè –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º {kwargs['max_value']}"
                    )
                    continue

                if math.isinf(value) or math.isnan(value):
                    self.show_error_cat("ü§® –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ-—á–∏—Å–ª–æ?")
                    continue

                if abs(value) > 1e10:
                    console.print("[yellow]ü§î –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ! –£–≤–µ—Ä–µ–Ω?[/yellow]")

                return value

            except Exception:
                self.show_error_cat("üêæ –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")

    def show_error_cat(self, message):
        error_panel = Panel(
            f"[bold red]{message}[/bold red]\n\n  /\\_/\\  \n ( x.x ) \n  > ^ <  ",
            border_style="red",
        )
        console.print(error_panel)

    def show_goodbye_animation(self):
        frames = [
            "  /\\_/\\  \n ( -.- ) \n  > ^ <  –ü–û–ö–ê!",
            "  /\\_/\\  \n ( ‚Ä¢‚Ä¢‚Ä¢ ) \n  > ^ <  –ü–ê–ö–ê!",
            "  /\\_/\\  \n ( ¬∞¬∞¬∞ ) \n  > ^ <  –ü–û–ö–ê!",
            "  /\\_/\\  \n ( ___ ) \n  > ^ <  –ü–û–ö–ê!",
        ]
        with Live(auto_refresh=False, console=console) as live:
            for i in range(8):
                live.update(
                    Panel(
                        Text(frames[i % 4], style="bold magenta"),
                        title="[bold blue]–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üê±",
                        expand=False,
                    ),
                    refresh=True,
                )
                time.sleep(0.3)


def show_functions_table():
    table = Table(title="–ú—è—É-—É–Ω–∫—Ü–∏–∏")
    table.add_column("‚Ññ", style="cyan", justify="center")
    table.add_column("–§–æ—Ä–º—É–ª–∞", style="magenta")
    table.add_column("–û–±–ª–∞—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", style="green")
    for key, (formula_str, _, domain) in FUNCTIONS.items():
        domain_str = domain if domain else "–í—Å—è —á–∏—Å–ª–æ–≤–∞—è –æ—Å—å"
        table.add_row(key, str(formula_str), domain_str)
    console.print(table)


def show_methods_table():
    table = Table(title="–ú–µ—Ç–æ–¥—ã")
    table.add_column("‚Ññ", style="cyan", justify="center")
    table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="magenta")
    table.add_column("–ü–æ—Ä—è–¥–æ–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏", style="green")
    methods = [
        ("1", "–õ–µ–≤—ã–µ –ú—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏", "O(h)"),
        ("2", "–ü—Ä–∞–≤—ã–µ –ú—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏", "O(h)"),
        ("3", "–°—Ä–µ–¥–Ω–∏–µ –ú—è—É-—É–≥–æ–ª—å–Ω–∏–∫–∏", "O(h¬≤)"),
        ("4", "–ú—è—É–ø–µ—Ü–∏–∏", "O(h¬≤)"),
        ("5", "–ö–æ—Ç–æ–°–∏–º–ø—Å–æ–Ω", "O(h‚Å¥)"),
    ]
    for num, name, order in methods:
        table.add_row(num, name, order)
    console.print(table)


def main():
    app = IntegrationApp()
    play_meow()
    app.run()


if __name__ == "__main__":
    main()
